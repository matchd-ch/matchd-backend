# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

daemon off;

error_log /dev/stdout warn;

events {
    worker_connections  1024;

    multi_accept on;
    use epoll;
}

http {
    $IP_WHITELIST
    deny all;

    server_tokens off;

    access_log /dev/stdout;

    client_max_body_size 0;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Define the MIME types for files.
    include       /opt/app-root/etc/mime.types;
    default_type  application/octet-stream;

    # Update charset_types due to updated mime.types
    charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;


    # Speed up file transfers by using sendfile() to copy directly
    # between descriptors rather than using read()/write().
    sendfile        on;

    # Tell Nginx not to send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out. (adds TCP_CORK)
    tcp_nopush      on;

    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
    # collates several smaller packets together into one larger packet, thus saving
    # bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
    tcp_nodelay     off;

    # Compression

    # Enable Gzip compressed.
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version  1.0;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;
    # text/html is always compressed by HttpGzipModule


    # CSP

    add_header X-Frame-Options SAMEORIGIN;

    add_header X-Content-Type-Options nosniff;

    add_header X-XSS-Protection "1; mode=block";

    add_header X-Download-Options "noopen";

    add_header X-Permitted-Cross-Domain-Policies "none";

    add_header Cross-Origin-Window-Policy "deny";

    add_header Content-Security-Policy "default-src 'self' https://*.matchd.ch http://*.matchd.lo ; prefetch-src 'self' https://*.matchd.ch http://*.matchd.lo ; frame-src 'self' https://*.matchd.ch http://*.matchd.lo ; frame-ancestors 'self' https://*.matchd.ch http://*.matchd.lo ; script-src 'self' 'sha256-ARNjSKtspj8a/DrVLo1nQbdtVgrLyArpOfU/2z9mbII=' https://*.matchd.ch http://*.matchd.lo ; object-src 'self' ; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com ; img-src 'self' data: blob: https://*.matchd.ch http://*.matchd.lo ; font-src 'self' https://fonts.gstatic.com data: ; connect-src 'self' https://*.matchd.ch http://*.matchd.lo ; worker-src 'self' ; upgrade-insecure-requests; block-all-mixed-content; manifest-src 'self'";

    server {
        client_body_temp_path /tmp/nginx_client_temp 1 2;
        client_max_body_size 0;

        listen      8080 default_server;
        root        /opt/app-root/src;
        index       index.html;

        location / {
            client_max_body_size 0;
            satisfy any;
            try_files $uri $uri.html @proxy;
            expires off;
        }

        location ~* \.(?:ico|css|js|gif|jpg|jpeg|png|svg|svgz|ttf|ttc|otf|eot|woff|woff2|mp4|ogg|ogv|webm|htc)(\?[0-9]+)?$ {
            access_log off;
            log_not_found off;
            expires 1M;
            add_header Cache-Control "public";
            try_files $uri @proxy;
        }

        location @proxy {
            expires off;
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-Cache-Status $upstream_cache_status;

            proxy_redirect                      off;
            proxy_set_header Host               $host;
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto  $scheme;
            proxy_ignore_headers        Cache-Control;
            proxy_http_version          1.1;
            proxy_read_timeout          1m;
            proxy_connect_timeout       1m;
            # PROXY_URL gets replaced during build
            proxy_pass                  $PROXY_URL; # set the address of the python instance here
        }

        location ~* \.(?:manifest|appcache|manifest.json)$ {
            expires off;
            add_header "Cache-Control" "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        }

        location ~* /service-worker.js {
            expires off;
            add_header "Cache-Control" "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            access_log off;
        }

        location ~ \.map$ {
            satisfy any;
            allow all;
            try_files $uri =404;
        }
    }
}