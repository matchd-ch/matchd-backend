#!/bin/bash

set -e

echo $PWD

echo "Setup docker-compose" >&2
echo "--------------------" >&2
echo "    CI_PROJECT_ID: ${CI_PROJECT_ID}" >&2
echo "    CI_PROJECT_NAME: ${CI_PROJECT_NAME}" >&2
echo "    CI_COMMIT_REF_NAME: ${CI_COMMIT_REF_NAME}" >&2
echo "    CI_COMMIT_REF_SLUG: ${CI_COMMIT_REF_SLUG}" >&2
echo "    COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}" >&2
echo "    COMPOSE_ACTION: ${COMPOSE_ACTION}" >&2
echo "    IMAGE: ${IMAGE}" >&2

echo "Environment" >&2
echo "-----------" >&2
echo "    DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}" >&2
echo "    DJANGO_DB_NAME: ${DJANGO_DB_NAME}" >&2
echo "    DJANGO_DB_USER: ${DJANGO_DB_USER}" >&2
#echo "    DJANGO_DB_PW: ${DJANGO_DB_PW}" >&2
echo "    DJANGO_DB_HOST: ${DJANGO_DB_HOST}" >&2
echo "    DJANGO_DB_PORT: ${DJANGO_DB_PORT}" >&2
echo "    DJANGO_ELASTIC_SEARCH_URL: ${DJANGO_ELASTIC_SEARCH_URL}" >&2
echo "    DJANGO_EMAIL: ${DJANGO_EMAIL}" >&2
echo "    DJANGO_EMAIL_HOST: ${DJANGO_EMAIL_HOST}" >&2
echo "    DJANGO_EMAIL_PORT: ${DJANGO_EMAIL_PORT}" >&2
#echo "    DJANGO_EMAIL_HOST_PASSWORD: ${DJANGO_EMAIL_HOST_PASSWORD}" >&2
echo "    DJANGO_EMAIL_HOST_USER: ${DJANGO_EMAIL_HOST_USER}" >&2
echo "    DJANGO_EMAIL_SUBJECT_PREFIX: ${DJANGO_EMAIL_SUBJECT_PREFIX}" >&2
echo "    DJANGO_GRAPHIQL_ENABLED: ${DJANGO_GRAPHIQL_ENABLED}" >&2
echo "    FRONTEND_URL: ${FRONTEND_URL}" >&2
echo "    APP_DOMAIN: ${APP_DOMAIN}" >&2
echo "    APP_CSRF_COOKIE_DOMAIN: ${APP_CSRF_COOKIE_DOMAIN}" >&2
echo "    WAGTAIL_SITE_NAME: ${WAGTAIL_SITE_NAME}" >&2

export DOCKER_GATEWAY_HOST="`/sbin/ip route|awk '/default/ { print $3 }'`"
export DOCKER_GATEWAY_HOST_2="`hostname -I |awk '{print $1}'  `"

echo "    DOCKER_GATEWAY_HOST: ${DOCKER_GATEWAY_HOST}" >&2
echo "    DOCKER_GATEWAY_HOST_2: ${DOCKER_GATEWAY_HOST_2}" >&2

export TRAEFIK_ROUTER_NAME="api-${COMPOSE_PROJECT_NAME}"

echo "    TRAEFIK_ROUTER_NAME: ${TRAEFIK_ROUTER_NAME}" >&2

if [[ ! -f "docker-compose.yml" ]]
then
    echo "Creating 'docker-compse.yml' template…"
    cat <<EOF >docker-compose.yml
---
version: '3.8'

services:
  web:
    image: ${IMAGE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${TRAEFIK_ROUTER_NAME}.rule=Host(\`${APP_DOMAIN}\`)"
    environment:
      DJANGO_SETTINGS_MODULE: '${DJANGO_SETTINGS_MODULE}'
      DJANGO_DB_NAME: '${DJANGO_DB_NAME}'
      DJANGO_DB_USER: '${DJANGO_DB_USER}'
      DJANGO_DB_PW: '${DJANGO_DB_PW}'
      DJANGO_DB_HOST: '${DOCKER_GATEWAY_HOST}'
      DJANGO_DB_PORT: '${DJANGO_DB_PORT}'
      DJANGO_ELASTIC_SEARCH_URL: '${DJANGO_ELASTIC_SEARCH_URL}'
      DJANGO_EMAIL: '${DJANGO_EMAIL}'
      DJANGO_EMAIL_HOST: '${DJANGO_EMAIL_HOST}'
      DJANGO_EMAIL_PORT: '${DJANGO_EMAIL_PORT}'
      DJANGO_EMAIL_HOST_PASSWORD: '${DJANGO_EMAIL_HOST_PASSWORD}'
      DJANGO_EMAIL_HOST_USER: '${DJANGO_EMAIL_HOST_USER}'
      DJANGO_EMAIL_SUBJECT_PREFIX: '${DJANGO_EMAIL_SUBJECT_PREFIX}'
      DJANGO_GRAPHIQL_ENABLED: '${DJANGO_GRAPHIQL_ENABLED}'
      FRONTEND_URL: '${FRONTEND_URL}'
      APP_DOMAIN: '${APP_DOMAIN}'
      APP_CSRF_COOKIE_DOMAIN: '${APP_CSRF_COOKIE_DOMAIN}'
      WAGTAIL_SITE_NAME: '${WAGTAIL_SITE_NAME}'
    volumes:
      - /var/run/mysqld/mysqld.sock:/var/run/mysqld/mysqld.sock
    networks:
      matchd_matchd:
        aliases:
          - ${APP_DOMAIN}

networks:
  matchd_matchd:
    external: true
EOF
fi


case "${COMPOSE_ACTION}" in

    "build")
        echo "Building images…"
        docker-compose build
        ;;

    "push")
        echo "Pushing images…"
        docker-compose push ${DOCKER_PUSH_SERVICES}
        ;;

    "up")
        if [[ "${REMOVE_VOLUMES}" == "yes" ]]
        then
            echo "Removing containers and volumes first…"
            docker-compose down -v
        fi

        echo "Creating and starting containers…"
        docker-compose -f docker-compose.yml up -d

        for SLEEP in 1 3 5 10 10 10 10 10
        do
            echo "Checking health of containers…"
            docker-compose ps -a | sed 1,2d | grep -P '(^(?!.*\bUp\b).*$|\(health: starting\)|\(unhealthy\))' && sleep ${SLEEP} || exit 0
        done
        exit 1
        ;;

    "down")
        echo "Removing containers, images and volumes…"
        docker-compose down -v --remove-orphans --rmi all
        ;;

    *)
        echo "ERROR: Invalid action '${COMPOSE_ACTION}'" >&2
        exit 255

esac


