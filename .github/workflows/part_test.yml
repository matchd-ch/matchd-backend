on:
  workflow_call: {}

name: "Test"

# Secrets:
# * CACHE_VERSION - Set to `date +%s`, set new when the cache should be busted

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEFAULT_PYTHON_VERSION: 3.12.3

jobs:
  test:
    name: "Tests"

    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:11.2.2
        env:
          MARIADB_DATABASE: "matchd"
          MARIADB_USER: "matchd"
          MARIADB_PASSWORD: "matchd"
          MARIADB_ROOT_PASSWORD: "matchd"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
      elasticsearch:
        image: elasticsearch:8.12.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
        - 9200:9200

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev

      - name: Serve static files
        run: |
          pipenv run python manage.py collectstatic --noinput

      - name: Run test suite
        run: |
          pipenv run test -svvv
        env:
          DB_HOST: '127.0.0.1'
          DB_PORT: '3306'
          DB_NAME: 'matchd'
          DB_USER: 'root'
          DB_PASSWORD: 'matchd'
          ELASTIC_SEARCH_URL: 'http://127.0.0.1:9200'

  seeds:
    name: "Test Seeds"

    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:11.2.2
        env:
          MARIADB_DATABASE: "matchd"
          MARIADB_USER: "matchd"
          MARIADB_PASSWORD: "matchd"
          MARIADB_ROOT_PASSWORD: "matchd"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
      elasticsearch:
        image: elasticsearch:8.12.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
        - 9200:9200

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5
        with:
          lfs: true

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev

      - name: Run Seeds
        run: |
          pipenv run setup
        env:
          DB_HOST: '127.0.0.1'
          DB_PORT: '3306'
          DB_NAME: 'matchd'
          DB_USER: 'root'
          DB_PASSWORD: 'matchd'
          ELASTIC_SEARCH_URL: 'http://127.0.0.1:9200'
  
  format:
    name: "Check Formatting"

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev

      - name: Run formatter
        run: |
          pipenv run yapf --diff --recursive --verbose $GITHUB_WORKSPACE

  lint:
    name: "Lint"

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev

      - name: Run linter
        run: |
          pipenv run lint